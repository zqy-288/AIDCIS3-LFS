"""
报告管理器界面组件
提供报告生成、查看、导出的用户界面
"""

import os
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QGroupBox, QLabel, QPushButton, QComboBox, QLineEdit,
    QTextEdit, QProgressBar, QTableWidget, QTableWidgetItem,
    QMessageBox, QFileDialog, QProgressDialog, QTabWidget,
    QFrame, QScrollArea, QCheckBox, QSpinBox, QDateEdit,
    QSplitter, QHeaderView
)
from PySide6.QtCore import Qt, Signal, QThread, QTimer, QDate
from PySide6.QtGui import QFont, QIcon, QPalette, QColor, QPixmap

from .report_generator import ReportGenerator, ReportGenerationThread


class ReportManagerWidget(QWidget):
    """报告管理器界面组件"""
    
    # 信号定义
    report_generated = Signal(str, str)  # 报告类型, 文件路径
    export_requested = Signal(str, dict)  # 数据类型, 导出配置
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.report_generator = ReportGenerator()
        self.current_workpiece_data = {}
        self.current_hole_data = {}
        self.generation_thread = None
        
        self.setup_ui()
        self.setup_connections()
        self.load_recent_reports()
        
    def setup_ui(self):
        """设置用户界面"""
        layout = QVBoxLayout(self)
        
        # 创建选项卡
        self.tab_widget = QTabWidget()
        
        # 选项卡1：报告生成
        self.generation_tab = self.create_generation_tab()
        self.tab_widget.addTab(self.generation_tab, "📊 报告生成")
        
        # 选项卡2：数据导出
        self.export_tab = self.create_export_tab()
        self.tab_widget.addTab(self.export_tab, "📁 数据导出")
        
        # 选项卡3：报告历史
        self.history_tab = self.create_history_tab()
        self.tab_widget.addTab(self.history_tab, "📋 报告历史")
        
        layout.addWidget(self.tab_widget)
        
    def create_generation_tab(self) -> QWidget:
        """创建报告生成选项卡"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # 工件信息配置区域
        workpiece_group = QGroupBox("工件信息配置")
        workpiece_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #2ECC71;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #f8fff8;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #2E7D32;
                background-color: #313642;
            }
        """)
        workpiece_layout = QGridLayout(workpiece_group)
        
        # 工件信息输入字段
        self.model_input = QLineEdit("CP1400")
        self.serial_input = QLineEdit(f"SN-{datetime.now().strftime('%Y%m%d-%H%M')}")
        self.operator_input = QLineEdit("系统用户")
        self.detection_equipment_input = QLineEdit("数字化检测工作站 V1.0")
        
        workpiece_layout.addWidget(QLabel("产品型号:"), 0, 0)
        workpiece_layout.addWidget(self.model_input, 0, 1)
        workpiece_layout.addWidget(QLabel("工件序列号:"), 0, 2)
        workpiece_layout.addWidget(self.serial_input, 0, 3)
        workpiece_layout.addWidget(QLabel("操作员:"), 1, 0)
        workpiece_layout.addWidget(self.operator_input, 1, 1)
        workpiece_layout.addWidget(QLabel("检测设备:"), 1, 2)
        workpiece_layout.addWidget(self.detection_equipment_input, 1, 3)
        
        layout.addWidget(workpiece_group)
        
        # 报告类型选择区域
        report_type_group = QGroupBox("报告类型选择")
        report_type_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #007ACC;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #f0f8ff;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #1976D2;
                background-color: #313642;
            }
        """)
        report_type_layout = QVBoxLayout(report_type_group)
        
        # 报告类型选择
        type_selection_layout = QHBoxLayout()
        
        self.pdf_report_btn = QPushButton("📄 生成PDF报告")
        self.pdf_report_btn.setStyleSheet("""
            QPushButton {
                background-color: #2ECC71;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
                min-height: 40px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        self.web_report_btn = QPushButton("🌐 生成Web报告")
        self.web_report_btn.setStyleSheet("""
            QPushButton {
                background-color: #007ACC;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
                min-height: 40px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0d47a1;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        type_selection_layout.addWidget(self.pdf_report_btn)
        type_selection_layout.addWidget(self.web_report_btn)
        type_selection_layout.addStretch()
        
        report_type_layout.addLayout(type_selection_layout)
        
        # 报告配置选项
        config_layout = QHBoxLayout()
        
        self.include_charts_cb = QCheckBox("包含图表")
        self.include_charts_cb.setChecked(True)
        self.include_images_cb = QCheckBox("包含图像")
        self.include_images_cb.setChecked(True)
        self.include_full_data_cb = QCheckBox("包含完整数据")
        self.include_full_data_cb.setChecked(False)  # 默认不包含，避免报告过长
        
        config_layout.addWidget(QLabel("报告内容:"))
        config_layout.addWidget(self.include_charts_cb)
        config_layout.addWidget(self.include_images_cb)
        config_layout.addWidget(self.include_full_data_cb)
        config_layout.addStretch()
        
        report_type_layout.addLayout(config_layout)
        layout.addWidget(report_type_group)
        
        # 生成进度区域
        progress_group = QGroupBox("生成进度")
        progress_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #FF9800;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #fff8e1;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #F57C00;
                background-color: #313642;
            }
        """)
        progress_layout = QVBoxLayout(progress_group)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.status_label = QLabel("准备就绪")
        self.status_label.setStyleSheet("font-size: 12px; color: #666666;")
        
        progress_layout.addWidget(self.status_label)
        progress_layout.addWidget(self.progress_bar)
        
        layout.addWidget(progress_group)
        
        # 添加弹性空间
        layout.addStretch()
        
        return tab
        
    def create_export_tab(self) -> QWidget:
        """创建数据导出选项卡"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # 导出格式选择
        format_group = QGroupBox("导出格式")
        format_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #9C27B0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #f3e5f5;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #7B1FA2;
                background-color: #313642;
            }
        """)
        format_layout = QHBoxLayout(format_group)
        
        self.excel_export_btn = QPushButton("📊 导出Excel")
        self.excel_export_btn.setStyleSheet("""
            QPushButton {
                background-color: #2ECC71;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
                min-height: 40px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        self.csv_export_btn = QPushButton("📄 导出CSV")
        self.csv_export_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
                min-height: 40px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        
        format_layout.addWidget(self.excel_export_btn)
        format_layout.addWidget(self.csv_export_btn)
        format_layout.addStretch()
        
        layout.addWidget(format_group)
        
        # 数据范围选择
        range_group = QGroupBox("数据范围")
        range_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #607D8B;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #eceff1;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #455A64;
                background-color: #313642;
            }
        """)
        range_layout = QGridLayout(range_group)
        
        self.export_all_rb = QCheckBox("导出所有数据")
        self.export_all_rb.setChecked(True)
        self.export_selected_rb = QCheckBox("仅导出不合格数据")
        self.export_range_rb = QCheckBox("自定义范围")
        
        self.hole_range_start = QSpinBox()
        self.hole_range_start.setMinimum(1)
        self.hole_range_start.setMaximum(10000)
        self.hole_range_start.setValue(1)
        
        self.hole_range_end = QSpinBox()
        self.hole_range_end.setMinimum(1)
        self.hole_range_end.setMaximum(10000)
        self.hole_range_end.setValue(1500)
        
        range_layout.addWidget(self.export_all_rb, 0, 0, 1, 2)
        range_layout.addWidget(self.export_selected_rb, 1, 0, 1, 2)
        range_layout.addWidget(self.export_range_rb, 2, 0)
        range_layout.addWidget(QLabel("从"), 2, 1)
        range_layout.addWidget(self.hole_range_start, 2, 2)
        range_layout.addWidget(QLabel("到"), 2, 3)
        range_layout.addWidget(self.hole_range_end, 2, 4)
        range_layout.addWidget(QLabel("孔位"), 2, 5)
        
        layout.addWidget(range_group)
        
        # 导出选项
        options_group = QGroupBox("导出选项")
        options_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #795548;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #efebe9;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #5D4037;
                background-color: #313642;
            }
        """)
        options_layout = QVBoxLayout(options_group)
        
        options_row1 = QHBoxLayout()
        self.include_header_cb = QCheckBox("包含表头")
        self.include_header_cb.setChecked(True)
        self.include_stats_cb = QCheckBox("包含统计信息")
        self.include_stats_cb.setChecked(True)
        self.include_charts_export_cb = QCheckBox("包含图表")
        self.include_charts_export_cb.setChecked(False)
        
        options_row1.addWidget(self.include_header_cb)
        options_row1.addWidget(self.include_stats_cb)
        options_row1.addWidget(self.include_charts_export_cb)
        options_row1.addStretch()
        
        options_layout.addLayout(options_row1)
        layout.addWidget(options_group)
        
        # 添加弹性空间
        layout.addStretch()
        
        return tab
        
    def create_history_tab(self) -> QWidget:
        """创建报告历史选项卡"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # 搜索和筛选区域
        search_group = QGroupBox("搜索和筛选")
        search_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #E91E63;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #fce4ec;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 8px 0 8px;
                color: #C2185B;
                background-color: #313642;
            }
        """)
        search_layout = QHBoxLayout(search_group)
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("搜索报告ID、工件型号...")
        
        self.search_btn = QPushButton("🔍 搜索")
        self.refresh_btn = QPushButton("🔄 刷新")
        
        search_layout.addWidget(QLabel("搜索:"))
        search_layout.addWidget(self.search_input)
        search_layout.addWidget(self.search_btn)
        search_layout.addWidget(self.refresh_btn)
        search_layout.addStretch()
        
        layout.addWidget(search_group)
        
        # 报告列表
        self.reports_table = QTableWidget()
        self.reports_table.setColumnCount(6)
        self.reports_table.setHorizontalHeaderLabels([
            "报告ID", "工件型号", "生成时间", "报告类型", "文件大小", "操作"
        ])
        
        # 设置表格样式
        self.reports_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                selection-background-color: #e3f2fd;
            }
            QTableWidget::item {
                padding: 8px;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 8px;
                border: none;
                font-weight: bold;
            }
        """)
        
        # 设置列宽
        header = self.reports_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.Stretch)
        
        layout.addWidget(self.reports_table)
        
        return tab
        
    def setup_connections(self):
        """设置信号连接"""
        # 报告生成按钮
        self.pdf_report_btn.clicked.connect(self.generate_pdf_report)
        self.web_report_btn.clicked.connect(self.generate_web_report)
        
        # 数据导出按钮
        self.excel_export_btn.clicked.connect(self.export_excel_data)
        self.csv_export_btn.clicked.connect(self.export_csv_data)
        
        # 历史记录功能
        self.search_btn.clicked.connect(self.search_reports)
        self.refresh_btn.clicked.connect(self.load_recent_reports)
        
        # 范围选择互斥
        self.export_all_rb.toggled.connect(self.update_export_range_state)
        self.export_selected_rb.toggled.connect(self.update_export_range_state)
        self.export_range_rb.toggled.connect(self.update_export_range_state)
        
    def set_workpiece_data(self, workpiece_data: Dict):
        """设置工件数据"""
        self.current_workpiece_data = workpiece_data
        
        # 更新界面显示
        if 'model' in workpiece_data:
            self.model_input.setText(workpiece_data['model'])
        if 'serial' in workpiece_data:
            self.serial_input.setText(workpiece_data['serial'])
        if 'operator' in workpiece_data:
            self.operator_input.setText(workpiece_data['operator'])
            
    def set_hole_data(self, hole_data: Dict):
        """设置孔位数据"""
        self.current_hole_data = hole_data
        
        # 更新界面显示
        if 'total_holes' in hole_data:
            self.hole_range_end.setMaximum(hole_data['total_holes'])
            self.hole_range_end.setValue(hole_data['total_holes'])
            
    def generate_pdf_report(self):
        """生成PDF报告"""
        if not self.validate_data():
            return
            
        # 准备工件信息
        workpiece_info = self.get_workpiece_info()
        
        # 启动生成线程
        self.start_report_generation("PDF", workpiece_info)
        
    def generate_web_report(self):
        """生成Web报告"""
        if not self.validate_data():
            return
            
        # 准备工件信息
        workpiece_info = self.get_workpiece_info()
        
        # 生成Web报告数据
        try:
            web_data = self.report_generator.generate_web_report_data(
                self.current_hole_data, workpiece_info
            )
            
            # 保存Web报告数据
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            web_filename = f"web_report_{workpiece_info['model']}_{timestamp}.json"
            web_path = self.report_generator.output_dir / web_filename
            
            with open(web_path, 'w', encoding='utf-8') as f:
                json.dump(web_data, f, ensure_ascii=False, indent=2)
                
            QMessageBox.information(
                self, "Web报告生成完成", 
                f"Web报告数据已生成：\n{web_path}\n\n"
                "您可以使用此数据文件创建动态Web报告。"
            )
            
            self.report_generated.emit("Web", str(web_path))
            
        except Exception as e:
            QMessageBox.critical(self, "Web报告生成失败", f"生成Web报告时发生错误：\n{str(e)}")
            
    def export_excel_data(self):
        """导出Excel数据"""
        if not self.validate_data():
            return
            
        workpiece_info = self.get_workpiece_info()
        self.start_report_generation("Excel", workpiece_info)
        
    def export_csv_data(self):
        """导出CSV数据"""
        if not self.validate_data():
            return
            
        workpiece_info = self.get_workpiece_info()
        self.start_report_generation("CSV", workpiece_info)
        
    def start_report_generation(self, report_type: str, workpiece_info: Dict):
        """启动报告生成线程"""
        # 禁用按钮
        self.set_buttons_enabled(False)
        
        # 显示进度条
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText(f"正在生成{report_type}报告...")
        
        # 创建生成线程
        self.generation_thread = ReportGenerationThread(
            self.report_generator, report_type, 
            self.current_hole_data, workpiece_info
        )
        
        # 连接信号
        self.generation_thread.progress_updated.connect(self.progress_bar.setValue)
        self.generation_thread.status_updated.connect(self.status_label.setText)
        self.generation_thread.generation_completed.connect(self.on_generation_completed)
        self.generation_thread.generation_failed.connect(self.on_generation_failed)
        
        # 启动线程
        self.generation_thread.start()
        
    def on_generation_completed(self, report_type: str, file_path: str):
        """报告生成完成处理"""
        # 隐藏进度条
        self.progress_bar.setVisible(False)
        self.status_label.setText("生成完成")
        
        # 启用按钮
        self.set_buttons_enabled(True)
        
        # 显示成功消息
        QMessageBox.information(
            self, f"{report_type}报告生成完成", 
            f"{report_type}报告已成功生成：\n{file_path}"
        )
        
        # 发射信号
        self.report_generated.emit(report_type, file_path)
        
        # 刷新历史记录
        self.load_recent_reports()
        
    def on_generation_failed(self, report_type: str, error_message: str):
        """报告生成失败处理"""
        # 隐藏进度条
        self.progress_bar.setVisible(False)
        self.status_label.setText("生成失败")
        
        # 启用按钮
        self.set_buttons_enabled(True)
        
        # 显示错误消息
        QMessageBox.critical(
            self, f"{report_type}报告生成失败", 
            f"生成{report_type}报告时发生错误：\n{error_message}"
        )
        
    def set_buttons_enabled(self, enabled: bool):
        """设置按钮启用状态"""
        self.pdf_report_btn.setEnabled(enabled)
        self.web_report_btn.setEnabled(enabled)
        self.excel_export_btn.setEnabled(enabled)
        self.csv_export_btn.setEnabled(enabled)
        
    def validate_data(self) -> bool:
        """验证数据"""
        if not self.current_workpiece_data and not self.current_hole_data:
            QMessageBox.warning(
                self, "数据不足", 
                "请先加载工件数据和孔位数据后再生成报告。"
            )
            return False
            
        if not self.model_input.text().strip():
            QMessageBox.warning(self, "输入错误", "请输入产品型号。")
            return False
            
        return True
        
    def get_workpiece_info(self) -> Dict:
        """获取工件信息"""
        return {
            'model': self.model_input.text().strip(),
            'serial': self.serial_input.text().strip(),
            'operator': self.operator_input.text().strip(),
            'detection_equipment': self.detection_equipment_input.text().strip(),
            'start_time': datetime.now(),
            'end_time': datetime.now()
        }
        
    def update_export_range_state(self):
        """更新导出范围状态"""
        range_enabled = self.export_range_rb.isChecked()
        self.hole_range_start.setEnabled(range_enabled)
        self.hole_range_end.setEnabled(range_enabled)
        
    def load_recent_reports(self):
        """加载最近的报告记录"""
        # 清空表格
        self.reports_table.setRowCount(0)
        
        # 扫描报告目录
        reports_dir = self.report_generator.output_dir
        if not reports_dir.exists():
            return
            
        report_files = []
        for file_path in reports_dir.iterdir():
            if file_path.suffix in ['.pdf', '.xlsx', '.csv', '.json']:
                try:
                    stat = file_path.stat()
                    report_files.append({
                        'name': file_path.name,
                        'path': str(file_path),
                        'size': stat.st_size,
                        'mtime': datetime.fromtimestamp(stat.st_mtime),
                        'type': self.get_report_type(file_path.suffix)
                    })
                except Exception:
                    continue
                    
        # 按修改时间排序
        report_files.sort(key=lambda x: x['mtime'], reverse=True)
        
        # 填充表格
        self.reports_table.setRowCount(len(report_files))
        for i, report in enumerate(report_files):
            # 解析报告ID
            report_id = self.extract_report_id(report['name'])
            workpiece_model = self.extract_workpiece_model(report['name'])
            
            self.reports_table.setItem(i, 0, QTableWidgetItem(report_id))
            self.reports_table.setItem(i, 1, QTableWidgetItem(workpiece_model))
            self.reports_table.setItem(i, 2, QTableWidgetItem(report['mtime'].strftime('%Y-%m-%d %H:%M:%S')))
            self.reports_table.setItem(i, 3, QTableWidgetItem(report['type']))
            self.reports_table.setItem(i, 4, QTableWidgetItem(self.format_file_size(report['size'])))
            
            # 操作按钮
            actions_widget = QWidget()
            actions_layout = QHBoxLayout(actions_widget)
            actions_layout.setContentsMargins(5, 0, 5, 0)
            
            open_btn = QPushButton("打开")
            open_btn.setStyleSheet("QPushButton { font-size: 10px; padding: 4px 8px; }")
            open_btn.clicked.connect(lambda checked, path=report['path']: self.open_report(path))
            
            delete_btn = QPushButton("删除")
            delete_btn.setStyleSheet("QPushButton { font-size: 10px; padding: 4px 8px; color: red; }")
            delete_btn.clicked.connect(lambda checked, path=report['path']: self.delete_report(path))
            
            actions_layout.addWidget(open_btn)
            actions_layout.addWidget(delete_btn)
            actions_layout.addStretch()
            
            self.reports_table.setCellWidget(i, 5, actions_widget)
            
    def get_report_type(self, suffix: str) -> str:
        """获取报告类型"""
        type_map = {
            '.pdf': 'PDF报告',
            '.xlsx': 'Excel数据',
            '.csv': 'CSV数据',
            '.json': 'Web报告'
        }
        return type_map.get(suffix, '未知')
        
    def extract_report_id(self, filename: str) -> str:
        """从文件名提取报告ID"""
        # 简单的ID提取逻辑
        parts = filename.split('_')
        if len(parts) >= 3:
            return f"REP-{parts[1]}-{parts[2].split('.')[0]}"
        return "N/A"
        
    def extract_workpiece_model(self, filename: str) -> str:
        """从文件名提取工件型号"""
        parts = filename.split('_')
        if len(parts) >= 2:
            return parts[1]
        return "N/A"
        
    def format_file_size(self, size: int) -> str:
        """格式化文件大小"""
        if size < 1024:
            return f"{size} B"
        elif size < 1024 * 1024:
            return f"{size / 1024:.1f} KB"
        else:
            return f"{size / (1024 * 1024):.1f} MB"
            
    def open_report(self, file_path: str):
        """打开报告文件"""
        try:
            import subprocess
            import platform
            
            if platform.system() == 'Darwin':  # macOS
                subprocess.call(['open', file_path])
            elif platform.system() == 'Windows':  # Windows
                os.startfile(file_path)
            else:  # Linux
                subprocess.call(['xdg-open', file_path])
                
        except Exception as e:
            QMessageBox.warning(self, "打开失败", f"无法打开文件：\n{str(e)}")
            
    def delete_report(self, file_path: str):
        """删除报告文件"""
        reply = QMessageBox.question(
            self, "确认删除", 
            f"确定要删除这个报告文件吗？\n{file_path}",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                os.remove(file_path)
                self.load_recent_reports()  # 刷新列表
                QMessageBox.information(self, "删除成功", "报告文件已删除。")
            except Exception as e:
                QMessageBox.critical(self, "删除失败", f"删除文件时发生错误：\n{str(e)}")
                
    def search_reports(self):
        """搜索报告"""
        search_text = self.search_input.text().strip().lower()
        if not search_text:
            self.load_recent_reports()
            return
            
        # 隐藏不匹配的行
        for i in range(self.reports_table.rowCount()):
            should_show = False
            for j in range(4):  # 搜索前4列
                item = self.reports_table.item(i, j)
                if item and search_text in item.text().lower():
                    should_show = True
                    break
                    
            self.reports_table.setRowHidden(i, not should_show)


if __name__ == "__main__":
    """测试报告管理器组件"""
    import sys
    from PySide6.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    
    # 创建报告管理器
    manager = ReportManagerWidget()
    
    # 设置测试数据
    test_workpiece_data = {
        'model': 'CP1400',
        'serial': 'SN-TEST-001',
        'operator': '测试用户'
    }
    
    test_hole_data = {
        'total_holes': 1500,
        'measurement_data': []
    }
    
    manager.set_workpiece_data(test_workpiece_data)
    manager.set_hole_data(test_hole_data)
    
    manager.show()
    
    sys.exit(app.exec())