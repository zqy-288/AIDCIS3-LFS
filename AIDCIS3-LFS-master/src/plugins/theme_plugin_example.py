"""
‰∏ªÈ¢òÊèí‰ª∂Á§∫‰æã
ÊºîÁ§∫Â¶Ç‰ΩïÂàõÂª∫‰∏Ä‰∏™‰∏ªÈ¢òÊèí‰ª∂ÔºåÊèê‰æõÂÆåÊï¥ÁöÑUI‰∏ªÈ¢òÊîØÊåÅ
"""

from typing import Dict, Any, Optional
from PySide6.QtWidgets import QWidget, QApplication
from PySide6.QtCore import Qt

try:
    from ..interfaces.ui_plugin_interface import (
        IUIThemePlugin, UIPluginMetadata, UIPluginType, UIPluginCapability
    )
    from ..core.plugin_system.manager import BasePlugin
except ImportError:
    # ‰ªéÊèí‰ª∂ÁõÆÂΩïËøêË°åÊó∂ÁöÑÂØºÂÖ•Ë∑ØÂæÑ
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    
    from interfaces.ui_plugin_interface import (
        IUIThemePlugin, UIPluginMetadata, UIPluginType, UIPluginCapability
    )
    from core.plugin_system.manager import BasePlugin


class ModernDarkTheme:
    """Áé∞‰ª£Ê∑±Ëâ≤‰∏ªÈ¢òÂÆö‰πâ"""
    
    @staticmethod
    def get_colors() -> Dict[str, str]:
        """Ëé∑Âèñ‰∏ªÈ¢òÈ¢úËâ≤ÈÖçÁΩÆ"""
        return {
            # ‰∏ªËÉåÊôØËâ≤
            'background_primary': '#1E1E1E',      # VS CodeÊ∑±Ëâ≤‰∏ªÈ¢òËÉåÊôØ
            'background_secondary': '#252526',    # Èù¢ÊùøËÉåÊôØËâ≤
            'background_tertiary': '#2D2D30',     # Ê†áÈ¢òÊ†è/È´ò‰∫ÆËÉåÊôØ
            
            # Âº∫Ë∞ÉËâ≤
            'accent_primary': '#0E7ACC',          # VS CodeËìùËâ≤
            'accent_secondary': '#4FC3F7',        # ËæÖÂä©ËìùËâ≤
            'accent_hover': '#1177BB',            # ÊÇ¨ÂÅúÁä∂ÊÄÅ
            'accent_pressed': '#094771',          # Êåâ‰∏ãÁä∂ÊÄÅ
            
            # ÊñáÊú¨Ëâ≤
            'text_primary': '#CCCCCC',            # ‰∏ªÊñáÊú¨Ëâ≤
            'text_secondary': '#FFFFFF',          # ÈÜíÁõÆÊñáÂ≠ó
            'text_disabled': '#808080',           # Á¶ÅÁî®ÊñáÂ≠ó
            'text_muted': '#969696',              # Ê¨°Ë¶ÅÊñáÂ≠ó
            
            # Áä∂ÊÄÅËâ≤
            'success': '#4CAF50',                 # ÊàêÂäüÁä∂ÊÄÅ
            'warning': '#FF9800',                 # Ë≠¶ÂëäÁä∂ÊÄÅ
            'error': '#F44336',                   # ÈîôËØØÁä∂ÊÄÅ
            'info': '#2196F3',                    # ‰ø°ÊÅØÁä∂ÊÄÅ
            
            # ËæπÊ°ÜËâ≤
            'border_normal': '#3C3C3C',           # ÊôÆÈÄöËæπÊ°Ü
            'border_focus': '#0E7ACC',            # ÁÑ¶ÁÇπËæπÊ°Ü
            'border_disabled': '#555555',         # Á¶ÅÁî®ËæπÊ°Ü
            'border_hover': '#464647',            # ÊÇ¨ÂÅúËæπÊ°Ü
            
            # ÁâπÊÆäËÉåÊôØ
            'status_bar': '#007ACC',              # Áä∂ÊÄÅÊ†èËÉåÊôØ
            'selection': '#264F78',               # ÈÄâ‰∏≠ËÉåÊôØ
            'hover': '#2A2D2E',                   # ÊÇ¨ÂÅúËÉåÊôØ
            'active': '#094771',                  # Ê¥ªË∑ÉËÉåÊôØ
        }
    
    @staticmethod
    def get_fonts() -> Dict[str, Any]:
        """Ëé∑ÂèñÂ≠ó‰ΩìÈÖçÁΩÆ"""
        return {
            'family': 'Segoe UI',
            'size': 9,
            'weight': 'normal',
            'line_height': 1.4
        }
    
    @staticmethod
    def get_spacing() -> Dict[str, int]:
        """Ëé∑ÂèñÈó¥Ë∑ùÈÖçÁΩÆ"""
        return {
            'margin_small': 4,
            'margin_medium': 8,
            'margin_large': 16,
            'padding_small': 4,
            'padding_medium': 8,
            'padding_large': 12,
            'border_radius': 3
        }


class ModernDarkThemePlugin(BasePlugin, IUIThemePlugin):
    """Áé∞‰ª£Ê∑±Ëâ≤‰∏ªÈ¢òÊèí‰ª∂"""
    
    def __init__(self, metadata: UIPluginMetadata):
        BasePlugin.__init__(self, metadata)
        IUIThemePlugin.__init__(self, metadata)
        
        self._theme = ModernDarkTheme()
        self._applied_widgets = set()
    
    def load(self) -> bool:
        """Âä†ËΩΩÊèí‰ª∂"""
        try:
            print(f"üé® Ê≠£Âú®Âä†ËΩΩ‰∏ªÈ¢òÊèí‰ª∂: {self.metadata.name}")
            self._is_loaded = True
            return True
            
        except Exception as e:
            if self._logger:
                self._logger.error(f"Theme plugin {self.metadata.name} load failed: {e}")
            return False
    
    def start(self) -> bool:
        """ÂêØÂä®Êèí‰ª∂"""
        try:
            if not self._is_loaded:
                return False
            
            print(f"üé® Ê≠£Âú®ÂêØÂä®‰∏ªÈ¢òÊèí‰ª∂: {self.metadata.name}")
            self._is_started = True
            self._ui_ready = True
            
            return True
            
        except Exception as e:
            if self._logger:
                self._logger.error(f"Theme plugin {self.metadata.name} start failed: {e}")
            return False
    
    def stop(self) -> bool:
        """ÂÅúÊ≠¢Êèí‰ª∂"""
        try:
            print(f"‚èπÔ∏è Ê≠£Âú®ÂÅúÊ≠¢‰∏ªÈ¢òÊèí‰ª∂: {self.metadata.name}")
            
            # Ê∏ÖÁêÜÂ∫îÁî®ÁöÑÁªÑ‰ª∂
            self._applied_widgets.clear()
            
            self._is_started = False
            self._ui_ready = False
            
            return True
            
        except Exception as e:
            if self._logger:
                self._logger.error(f"Theme plugin {self.metadata.name} stop failed: {e}")
            return False
    
    def unload(self) -> bool:
        """Âç∏ËΩΩÊèí‰ª∂"""
        try:
            if self._is_started:
                self.stop()
            
            print(f"üì§ Ê≠£Âú®Âç∏ËΩΩ‰∏ªÈ¢òÊèí‰ª∂: {self.metadata.name}")
            
            self._is_loaded = False
            
            return True
            
        except Exception as e:
            if self._logger:
                self._logger.error(f"Theme plugin {self.metadata.name} unload failed: {e}")
            return False
    
    def create_widget(self, parent: Optional[QWidget] = None) -> QWidget:
        """ÂàõÂª∫‰∏ªÈ¢òÈÖçÁΩÆUIÁªÑ‰ª∂ÔºàÂèØÈÄâÔºâ"""
        # ‰∏ªÈ¢òÊèí‰ª∂ÈÄöÂ∏∏‰∏çÈúÄË¶ÅÁã¨Á´ãÁöÑUIÁªÑ‰ª∂
        # ËøôÈáåËøîÂõû‰∏Ä‰∏™ÁÆÄÂçïÁöÑÈÖçÁΩÆÈù¢Êùø
        widget = QWidget(parent)
        widget.setWindowTitle(f"{self.get_theme_name()} ‰∏ªÈ¢òËÆæÁΩÆ")
        return widget
    
    def destroy_widget(self) -> bool:
        """ÈîÄÊØÅUIÁªÑ‰ª∂"""
        return True
    
    def get_theme_name(self) -> str:
        """Ëé∑Âèñ‰∏ªÈ¢òÂêçÁß∞"""
        return "Áé∞‰ª£Ê∑±Ëâ≤‰∏ªÈ¢ò"
    
    def get_theme_colors(self) -> Dict[str, str]:
        """Ëé∑Âèñ‰∏ªÈ¢òÈ¢úËâ≤ÈÖçÁΩÆ"""
        return self._theme.get_colors()
    
    def get_stylesheet(self) -> str:
        """Ëé∑ÂèñÊ†∑ÂºèË°®"""
        colors = self._theme.get_colors()
        fonts = self._theme.get_fonts()
        spacing = self._theme.get_spacing()
        
        return f"""
        /* ÂÖ®Â±ÄÊ†∑Âºè */
        QApplication {{
            background-color: {colors['background_primary']};
            color: {colors['text_primary']};
            font-family: "{fonts['family']}";
            font-size: {fonts['size']}pt;
        }}
        
        /* ‰∏ªÁ™óÂè£ */
        QMainWindow {{
            background-color: {colors['background_primary']};
            color: {colors['text_primary']};
        }}
        
        /* ÊåâÈíÆÊ†∑Âºè */
        QPushButton {{
            background-color: {colors['accent_primary']};
            color: {colors['text_secondary']};
            border: 1px solid {colors['border_normal']};
            border-radius: {spacing['border_radius']}px;
            padding: {spacing['padding_medium']}px {spacing['padding_large']}px;
            font-weight: bold;
            min-height: 20px;
        }}
        
        QPushButton:hover {{
            background-color: {colors['accent_hover']};
            border-color: {colors['border_hover']};
        }}
        
        QPushButton:pressed {{
            background-color: {colors['accent_pressed']};
        }}
        
        QPushButton:disabled {{
            background-color: {colors['border_disabled']};
            color: {colors['text_disabled']};
            border-color: {colors['border_disabled']};
        }}
        
        /* ËæìÂÖ•Ê°ÜÊ†∑Âºè */
        QLineEdit {{
            background-color: {colors['background_secondary']};
            color: {colors['text_primary']};
            border: 1px solid {colors['border_normal']};
            border-radius: {spacing['border_radius']}px;
            padding: {spacing['padding_small']}px {spacing['padding_medium']}px;
            selection-background-color: {colors['selection']};
        }}
        
        QLineEdit:focus {{
            border: 2px solid {colors['border_focus']};
        }}
        
        QLineEdit:hover {{
            border-color: {colors['border_hover']};
        }}
        
        QLineEdit:disabled {{
            background-color: {colors['background_primary']};
            color: {colors['text_disabled']};
            border-color: {colors['border_disabled']};
        }}
        
        /* ÊñáÊú¨ÁºñËæëÂô®Ê†∑Âºè */
        QTextEdit {{
            background-color: {colors['background_secondary']};
            color: {colors['text_primary']};
            border: 1px solid {colors['border_normal']};
            border-radius: {spacing['border_radius']}px;
            padding: {spacing['padding_medium']}px;
            selection-background-color: {colors['selection']};
        }}
        
        QTextEdit:focus {{
            border: 2px solid {colors['border_focus']};
        }}
        
        /* Ê†áÁ≠æÊ†∑Âºè */
        QLabel {{
            color: {colors['text_primary']};
            background: transparent;
        }}
        
        QLabel[class="title"] {{
            color: {colors['text_secondary']};
            font-weight: bold;
            font-size: {fonts['size'] + 2}pt;
        }}
        
        QLabel[class="subtitle"] {{
            color: {colors['text_muted']};
            font-size: {fonts['size'] - 1}pt;
        }}
        
        /* ÁªÑÂêàÊ°ÜÊ†∑Âºè */
        QComboBox {{
            background-color: {colors['background_secondary']};
            color: {colors['text_primary']};
            border: 1px solid {colors['border_normal']};
            border-radius: {spacing['border_radius']}px;
            padding: {spacing['padding_small']}px {spacing['padding_medium']}px;
            min-height: 20px;
        }}
        
        QComboBox:hover {{
            background-color: {colors['hover']};
            border-color: {colors['border_hover']};
        }}
        
        QComboBox:focus {{
            border-color: {colors['border_focus']};
        }}
        
        QComboBox::drop-down {{
            border: none;
            width: 20px;
        }}
        
        QComboBox::down-arrow {{
            image: none;
            border: 5px solid transparent;
            border-top: 5px solid {colors['text_primary']};
            margin-right: 5px;
        }}
        
        QComboBox QAbstractItemView {{
            background-color: {colors['background_secondary']};
            color: {colors['text_primary']};
            border: 1px solid {colors['border_normal']};
            selection-background-color: {colors['selection']};
        }}
        
        /* Ë°®Ê†ºÊ†∑Âºè */
        QTableWidget {{
            background-color: {colors['background_secondary']};
            color: {colors['text_primary']};
            gridline-color: {colors['border_normal']};
            selection-background-color: {colors['selection']};
            alternate-background-color: {colors['background_tertiary']};
        }}
        
        QHeaderView::section {{
            background-color: {colors['background_tertiary']};
            color: {colors['text_secondary']};
            border: 1px solid {colors['border_normal']};
            padding: {spacing['padding_medium']}px;
            font-weight: bold;
        }}
        
        QTableWidget::item {{
            padding: {spacing['padding_small']}px;
        }}
        
        QTableWidget::item:selected {{
            background-color: {colors['selection']};
        }}
        
        QTableWidget::item:hover {{
            background-color: {colors['hover']};
        }}
        
        /* ÂàÜÁªÑÊ°ÜÊ†∑Âºè */
        QGroupBox {{
            color: {colors['text_secondary']};
            border: 2px solid {colors['border_normal']};
            border-radius: {spacing['border_radius'] * 2}px;
            margin-top: 1ex;
            font-weight: bold;
            padding-top: {spacing['padding_large']}px;
        }}
        
        QGroupBox::title {{
            subcontrol-origin: margin;
            left: {spacing['margin_medium']}px;
            padding: 0 {spacing['padding_small']}px 0 {spacing['padding_small']}px;
        }}
        
        /* Áä∂ÊÄÅÊ†èÊ†∑Âºè */
        QStatusBar {{
            background-color: {colors['status_bar']};
            color: {colors['text_secondary']};
            border-top: 1px solid {colors['border_normal']};
        }}
        
        /* Â∑•ÂÖ∑Ê†èÊ†∑Âºè */
        QToolBar {{
            background-color: {colors['background_tertiary']};
            border: 1px solid {colors['border_normal']};
            spacing: {spacing['margin_small']}px;
        }}
        
        QToolBar::separator {{
            background-color: {colors['border_normal']};
            width: 1px;
            margin: 0 {spacing['margin_small']}px;
        }}
        
        /* ËèúÂçïÊ†∑Âºè */
        QMenuBar {{
            background-color: {colors['background_primary']};
            color: {colors['text_primary']};
        }}
        
        QMenuBar::item {{
            background: transparent;
            padding: {spacing['padding_small']}px {spacing['padding_medium']}px;
        }}
        
        QMenuBar::item:selected {{
            background-color: {colors['hover']};
        }}
        
        QMenuBar::item:pressed {{
            background-color: {colors['active']};
        }}
        
        QMenu {{
            background-color: {colors['background_secondary']};
            color: {colors['text_primary']};
            border: 1px solid {colors['border_normal']};
        }}
        
        QMenu::item {{
            padding: {spacing['padding_medium']}px {spacing['padding_large']}px;
        }}
        
        QMenu::item:selected {{
            background-color: {colors['selection']};
        }}
        
        QMenu::separator {{
            height: 1px;
            background-color: {colors['border_normal']};
            margin: {spacing['margin_small']}px 0;
        }}
        
        /* ÊªöÂä®Êù°Ê†∑Âºè */
        QScrollBar:vertical {{
            background-color: {colors['background_primary']};
            width: 12px;
            border: none;
        }}
        
        QScrollBar::handle:vertical {{
            background-color: {colors['border_normal']};
            border-radius: 6px;
            min-height: 20px;
        }}
        
        QScrollBar::handle:vertical:hover {{
            background-color: {colors['border_hover']};
        }}
        
        QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {{
            border: none;
            background: none;
        }}
        
        QScrollBar:horizontal {{
            background-color: {colors['background_primary']};
            height: 12px;
            border: none;
        }}
        
        QScrollBar::handle:horizontal {{
            background-color: {colors['border_normal']};
            border-radius: 6px;
            min-width: 20px;
        }}
        
        QScrollBar::handle:horizontal:hover {{
            background-color: {colors['border_hover']};
        }}
        
        QScrollBar::add-line:horizontal, QScrollBar::sub-line:horizontal {{
            border: none;
            background: none;
        }}
        
        /* ËøõÂ∫¶Êù°Ê†∑Âºè */
        QProgressBar {{
            background-color: {colors['background_secondary']};
            border: 1px solid {colors['border_normal']};
            border-radius: {spacing['border_radius']}px;
            text-align: center;
        }}
        
        QProgressBar::chunk {{
            background-color: {colors['accent_primary']};
            border-radius: {spacing['border_radius']}px;
        }}
        
        /* ÂàÜÂâ≤Á∫øÊ†∑Âºè */
        QFrame[frameShape="4"] {{ /* HLine */
            color: {colors['border_normal']};
        }}
        
        QFrame[frameShape="5"] {{ /* VLine */
            color: {colors['border_normal']};
        }}
        """
    
    def apply_to_widget(self, widget: QWidget) -> bool:
        """Â∫îÁî®‰∏ªÈ¢òÂà∞ÊåáÂÆöÁªÑ‰ª∂"""
        try:
            if widget:
                stylesheet = self.get_stylesheet()
                widget.setStyleSheet(stylesheet)
                self._applied_widgets.add(widget)
                return True
            return False
            
        except Exception as e:
            print(f"‚ùå Â∫îÁî®‰∏ªÈ¢òÂà∞ÁªÑ‰ª∂Â§±Ë¥•: {e}")
            return False
    
    def apply_theme(self, theme_data: Dict[str, Any]) -> bool:
        """Â∫îÁî®‰∏ªÈ¢òÔºàÁªßÊâøËá™IUIPluginÔºâ"""
        # ÂØπ‰∫é‰∏ªÈ¢òÊèí‰ª∂ÔºåËøô‰∏™ÊñπÊ≥ïÂèØ‰ª•Áî®‰∫éÈÖçÁΩÆ‰∏ªÈ¢òÊú¨Ë∫´
        return True
    
    def get_theme_data(self) -> Dict[str, Any]:
        """Ëé∑ÂèñÂÆåÊï¥‰∏ªÈ¢òÊï∞ÊçÆ"""
        return {
            'name': self.get_theme_name(),
            'colors': self.get_theme_colors(),
            'fonts': self._theme.get_fonts(),
            'spacing': self._theme.get_spacing(),
            'stylesheet': self.get_stylesheet()
        }
    
    def apply_global_theme(self) -> bool:
        """Â∫îÁî®ÂÖ®Â±Ä‰∏ªÈ¢ò"""
        try:
            app = QApplication.instance()
            if app:
                stylesheet = self.get_stylesheet()
                app.setStyleSheet(stylesheet)
                print(f"‚úÖ ÂÖ®Â±Ä‰∏ªÈ¢ò {self.get_theme_name()} Â∫îÁî®ÊàêÂäü")
                return True
            return False
            
        except Exception as e:
            print(f"‚ùå Â∫îÁî®ÂÖ®Â±Ä‰∏ªÈ¢òÂ§±Ë¥•: {e}")
            return False


# Êèí‰ª∂Â∑•ÂéÇÂáΩÊï∞
def create_plugin(metadata: UIPluginMetadata) -> ModernDarkThemePlugin:
    """ÂàõÂª∫‰∏ªÈ¢òÊèí‰ª∂ÂÆû‰æã"""
    return ModernDarkThemePlugin(metadata)


# Êèí‰ª∂ÂÖÉÊï∞ÊçÆ
PLUGIN_METADATA = UIPluginMetadata(
    name="ModernDarkTheme",
    version="1.0.0",
    description="Áé∞‰ª£Ê∑±Ëâ≤‰∏ªÈ¢òÊèí‰ª∂ÔºåÊèê‰æõ‰∏ì‰∏öÁöÑÊ∑±Ëâ≤UI‰∏ªÈ¢ò",
    author="AI-2 UIÂ±ÇÈáçÊûÑÂ∑•Á®ãÂ∏à",
    plugin_type="ui_component",
    entry_point="theme_plugin_example",
    ui_type=UIPluginType.THEME,
    capabilities=[
        UIPluginCapability.CONFIGURABLE,
        UIPluginCapability.THEMEABLE
    ],
    default_position="center",
    icon="theme.png",
    menu_text="Áé∞‰ª£Ê∑±Ëâ≤‰∏ªÈ¢ò",
    tooltip="Áé∞‰ª£‰∏ì‰∏öÁöÑÊ∑±Ëâ≤UI‰∏ªÈ¢ò",
    auto_start=True,
    priority=50  # ‰∏ªÈ¢òÊèí‰ª∂‰ºòÂÖàÁ∫ßËæÉÈ´ò
)