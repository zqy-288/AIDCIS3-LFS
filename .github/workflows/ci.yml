name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行，检查依赖更新
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: 'false'
        type: boolean
      deploy_to_staging:
        description: 'Deploy to staging environment'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.6.1'

jobs:
  # ==============================================================================
  # 代码质量检查
  # ==============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run black (formatting check)
      run: |
        black --check --diff src tests
      continue-on-error: false

    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff src tests
      continue-on-error: false

    - name: Run flake8 (linting)
      run: |
        flake8 src tests --format=github
      continue-on-error: false

    - name: Run mypy (type checking)
      run: |
        mypy src
      continue-on-error: true

    - name: Run pylint (advanced linting)
      run: |
        pylint src --output-format=github
      continue-on-error: true

    - name: Security check with bandit
      run: |
        pip install bandit[toml]
        bandit -r src -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  # ==============================================================================
  # 单元测试
  # ==============================================================================
  test:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # 减少矩阵大小，排除一些组合
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    # Linux/macOS 特定设置
    - name: Set up virtual display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        # 启动虚拟显示
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    # Windows 特定设置
    - name: Set up Windows environment
      if: runner.os == 'Windows'
      run: |
        # 设置Windows环境变量
        echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS特定依赖
        brew install cairo pango gdk-pixbuf libffi

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run unit tests
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || '' }}
      run: |
        pytest tests/unit \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          --html=test-report.html \
          --self-contained-html \
          -v

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          test-report.html
          htmlcov/

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ==============================================================================
  # 集成测试
  # ==============================================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aidcis3_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run integration tests
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: 'offscreen'
        DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/aidcis3_test'
      run: |
        pytest tests/integration \
          --cov=src \
          --cov-append \
          --cov-report=xml \
          --junitxml=integration-test-results.xml \
          --html=integration-test-report.html \
          --self-contained-html \
          -v

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          integration-test-results.xml
          integration-test-report.html

  # ==============================================================================
  # 性能测试
  # ==============================================================================
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [test]
    if: github.event.inputs.run_performance_tests == 'true' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,performance]"

    - name: Run performance tests
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: 'offscreen'
      run: |
        pytest tests/performance \
          --benchmark-json=benchmark-results.json \
          --benchmark-histogram=benchmark-histogram \
          --junitxml=performance-test-results.xml \
          -v

    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          benchmark-results.json
          benchmark-histogram.svg
          performance-test-results.xml

  # ==============================================================================
  # 构建
  # ==============================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # ==============================================================================
  # 安全扫描
  # ==============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload safety report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json

  # ==============================================================================
  # 文档构建
  # ==============================================================================
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        cd docs
        make html
      continue-on-error: true

    - name: Upload documentation
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # ==============================================================================
  # 部署到Staging环境
  # ==============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build, integration-test]
    if: |
      (github.event.inputs.deploy_to_staging == 'true' || 
       (github.ref == 'refs/heads/develop' && github.event_name == 'push')) &&
      github.event_name != 'schedule'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加实际的部署脚本
        # 例如：rsync, docker push, 或其他部署工具

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # 添加冒烟测试

  # ==============================================================================
  # 清理工作
  # ==============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, test, integration-test, build, security, docs]
    
    steps:
    - name: Clean up temporary files
      run: |
        echo "Cleaning up temporary files..."
        # 清理临时文件和缓存

    - name: Update status badges
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Updating status badges..."
        # 更新README中的状态徽章